<#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq" #><#+

// EFDesigner v1.2.6.25
// Copyright (c) 2017-2019 Michael Sawczyn
// https://github.com/msawczyn/EFDesigner

void GenerateEFCore(Manager manager, ModelRoot modelRoot)
{
   // Entities

   foreach (ModelClass modelClass in modelRoot.Classes)
   {
      string dir = modelClass.IsDependentType ? modelRoot.StructOutputDirectory : modelRoot.EntityOutputDirectory;
      if (!string.IsNullOrEmpty(modelClass.OutputDirectory)) dir = modelClass.OutputDirectory;
      manager.StartNewFile(Path.Combine(dir, $"{modelClass.Name}.{modelRoot.FileNameMarker}.cs"));
      WriteClass(modelClass);
   }

   // Enums

   foreach (ModelEnum modelEnum in modelRoot.Enums)
   {
      string dir = !string.IsNullOrEmpty(modelEnum.OutputDirectory) ? modelEnum.OutputDirectory : modelRoot.EnumOutputDirectory;
      manager.StartNewFile(Path.Combine(dir, $"{modelEnum.Name}.{modelRoot.FileNameMarker}.cs"));
      WriteEnum(modelEnum);
   }

   // not supported as of EF Core 2.0
   // manager.StartNewFile(Path.Combine(modelRoot.ContextOutputDirectory, $"{modelRoot.EntityContainerName}DatabaseInitializer.{modelRoot.FileNameMarker}.cs"));
   // WriteDatabaseInitializerEFCore(modelRoot);
   
   // not supported as of EF Core 2.0
   // manager.StartNewFile(Path.Combine(modelRoot.ContextOutputDirectory, $"{modelRoot.EntityContainerName}DbMigrationConfiguration.{modelRoot.FileNameMarker}.cs"));
   // WriteMigrationConfigurationEFCore(modelRoot);

   manager.StartNewFile(Path.Combine(modelRoot.ContextOutputDirectory, $"{modelRoot.EntityContainerName}.{modelRoot.FileNameMarker}.cs"));
   WriteDbContextEFCore(modelRoot);
}

List<string> GetAdditionalUsingStatementsEFCore(ModelRoot modelRoot)
{
   List<string> result = new List<string>();
   List<string> attributeTypes = modelRoot.Classes.SelectMany(c => c.Attributes).Select(a => a.Type).Distinct().ToList();

   if (attributeTypes.Any(t => t.IndexOf("Geometry", StringComparison.Ordinal) > -1 || t.IndexOf("Geography", StringComparison.Ordinal) > -1))
   {
      result.Add("using System.Data.Entity.Spatial;"); 
   }

   return result;
}

// void WriteDatabaseInitializerEFCore(ModelRoot modelRoot)
// {
//    Output("using System.Data.Entity;");
//    NL();
// 
//    BeginNamespace(modelRoot.Namespace);
// 
//    if (modelRoot.DatabaseInitializerType == DatabaseInitializerKind.MigrateDatabaseToLatestVersion)
//       Output($"public partial class {modelRoot.EntityContainerName}DatabaseInitializer : MigrateDatabaseToLatestVersion<{modelRoot.EntityContainerName}, {modelRoot.EntityContainerName}DbMigrationConfiguration>");
//    else
//       Output($"public partial class {modelRoot.EntityContainerName}DatabaseInitializer : {modelRoot.DatabaseInitializerType}<{modelRoot.EntityContainerName}>");
// 
//    Output("{");
//    Output("}");
//    EndNamespace(modelRoot.Namespace);
// }
// 
// void WriteMigrationConfigurationEFCore(ModelRoot modelRoot)
// {
//    //if (modelRoot.DatabaseInitializerType != DatabaseInitializerKind.MigrateDatabaseToLatestVersion)
//    //   return;
// 
//    Output("using System.Data.Entity.Migrations;");
//    NL();
// 
//    BeginNamespace(modelRoot.Namespace);
//    Output("public sealed partial class {0}DbMigrationConfiguration : DbMigrationsConfiguration<{0}>", modelRoot.EntityContainerName);
// 
//    Output("{");
//    Output("partial void Init();");
//    NL();
// 
//    Output("public {0}DbMigrationConfiguration()", modelRoot.EntityContainerName);
//    Output("{");
//    Output("AutomaticMigrationsEnabled = {0};", modelRoot.AutomaticMigrationsEnabled.ToString().ToLower());
//    Output("AutomaticMigrationDataLossAllowed = false;");
//    Output("Init();");
//    Output("}");
// 
//    Output("}");
//    EndNamespace(modelRoot.Namespace);
// }

void WriteDbContextEFCore(ModelRoot modelRoot)
{
   List<string> segments = new List<string>();

   Output("using System;");
   Output("using System.Collections.Generic;");
   Output("using System.Linq;");
   Output("using System.ComponentModel.DataAnnotations.Schema;");
   Output("using Microsoft.EntityFrameworkCore;");
   NL();

   BeginNamespace(modelRoot.Namespace);

   if (!string.IsNullOrEmpty(modelRoot.Summary))
   {
      Output("/// <summary>");
      WriteCommentBody(modelRoot.Summary);
      Output("/// </summary>");
      if (!string.IsNullOrEmpty(modelRoot.Description))
      {
         Output("/// <remarks>");
         WriteCommentBody(modelRoot.Description);
         Output("/// </remarks>");
      }
   }
   else
   {
      Output("/// <inheritdoc/>");
   }

   Output($"{modelRoot.EntityContainerAccess.ToString().ToLower()} partial class {modelRoot.EntityContainerName} : Microsoft.EntityFrameworkCore.DbContext");
   Output("{");

   PluralizationService pluralizationService = ModelRoot.PluralizationService;
   
   /***********************************************************************/
   // generate DBSets
   /***********************************************************************/
   
   IEnumerable<ModelClass> classesWithTables = null;

   switch (modelRoot.InheritanceStrategy)
   {
      case CodeStrategy.TablePerType:
         classesWithTables = modelRoot.Classes.Where(mc => !mc.IsDependentType).OrderBy(x => x.Name);
         break;
      case CodeStrategy.TablePerConcreteType:
         classesWithTables = modelRoot.Classes.Where(mc => !mc.IsDependentType && !mc.IsAbstract).OrderBy(x => x.Name);
         break;
      case CodeStrategy.TablePerHierarchy:
         classesWithTables = modelRoot.Classes.Where(mc => !mc.IsDependentType && mc.Superclass == null).OrderBy(x => x.Name);
         break;
   }

   if (classesWithTables != null)
   {
      Output("#region DbSets");
      
      foreach (ModelClass modelClass in modelRoot.Classes.OrderBy(x => x.Name))
      {
         string dbSetName;

         if (!string.IsNullOrEmpty(modelClass.DbSetName))
            dbSetName = modelClass.DbSetName;
         else 
            dbSetName = pluralizationService?.IsSingular(modelClass.Name) == true
               ? pluralizationService.Pluralize(modelClass.Name)
               : modelClass.Name;

         if (!string.IsNullOrEmpty(modelClass.Summary))
         {
            NL();
            Output("/// <summary>");
            WriteCommentBody($"Repository for {modelClass.FullName} - {modelClass.Summary}");
            Output("/// </summary>");
         }
         Output($"{modelRoot.DbSetAccess.ToString().ToLower()} virtual Microsoft.EntityFrameworkCore.DbSet<{modelClass.FullName}> {dbSetName} {{ get; set; }}");
      }

      Output("#endregion DbSets");
      NL();
   }

   /***********************************************************************/
   // construction
   /***********************************************************************/

   if (!string.IsNullOrEmpty(modelRoot.ConnectionString) || !string.IsNullOrEmpty(modelRoot.ConnectionStringName))
   {
      string connectionString = string.IsNullOrEmpty(modelRoot.ConnectionString) 
                                   ? $"Name={modelRoot.ConnectionStringName}"
                                   : modelRoot.ConnectionString;

      Output("/// <summary>");
      Output("/// Default connection string");
      Output("/// </summary>");
      Output($"public static string ConnectionString {{ get; set; }} = @\"{connectionString}\";");
      NL();
   }
   
   Output("/// <inheritdoc />");
   Output($"public {modelRoot.EntityContainerName}() : base()");
   Output("{");
   Output("}");
   NL();
   Output("/// <inheritdoc />");
   Output($"public {modelRoot.EntityContainerName}(DbContextOptions<{modelRoot.EntityContainerName}> options) : base(options)");
   Output("{");
   Output("}");
   NL();
   
   Output("partial void CustomInit(DbContextOptionsBuilder optionsBuilder);");
   NL();

   Output("/// <inheritdoc />");
   Output($"protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)");
   Output("{");

   segments.Clear();

   if (modelRoot.EntityFrameworkVersion > EFVersion.EF6 && modelRoot.GetEntityFrameworkPackageVersionNum() >= 2.1)
   {
      if (modelRoot.LazyLoadingEnabled)
      {
         segments.Add("UseLazyLoadingProxies()");
      }
   }

   if (segments.Any())
   {
      segments.Insert(0, "optionsBuilder");

      if (modelRoot.ChopMethodChains)
         OutputChopped(segments);
      else
         Output(string.Join(".", segments) + ";");
      
      NL();
   }

   Output("CustomInit(optionsBuilder);");
   Output("}");
   NL();
   
   Output("partial void OnModelCreatingImpl(ModelBuilder modelBuilder);");
   Output("partial void OnModelCreatedImpl(ModelBuilder modelBuilder);");
   NL();
   
   /***********************************************************************/
   // OnModelCreating 
   /***********************************************************************/
   Output("/// <inheritdoc />");
   Output("protected override void OnModelCreating(ModelBuilder modelBuilder)");
   Output("{");
   Output("base.OnModelCreating(modelBuilder);");
   Output("OnModelCreatingImpl(modelBuilder);");
   NL();
   
   Output($"modelBuilder.HasDefaultSchema(\"{modelRoot.DatabaseSchema}\");");

   Sawczyn.EFDesigner.EFModel.Multiplicity[] singles = { Sawczyn.EFDesigner.EFModel.Multiplicity.One, Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroOne };
   Sawczyn.EFDesigner.EFModel.Multiplicity[] multiples = { Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroMany };
   List<Association> visited = new List<Association>();
   List<string> foreignKeyColumns = new List<string>();

   foreach (ModelClass modelClass in modelRoot.Classes.OrderBy(x => x.Name))
   {
      segments.Clear();
      foreignKeyColumns.Clear();
      NL();

      // class level
      bool isDependent = modelClass.IsDependentType;
      segments.Add($"modelBuilder.Entity<{modelClass.FullName}>()");

      // note: this must come before the 'ToTable' call or there's a runtime error
      if (modelRoot.InheritanceStrategy == CodeStrategy.TablePerConcreteType && modelClass.Superclass != null)
         segments.Add("Map(x => x.MapInheritedProperties())");

      if (classesWithTables.Contains(modelClass))
      {
         if (modelClass.DatabaseSchema == modelClass.ModelRoot.DatabaseSchema)
            segments.Add($"ToTable(\"{modelClass.TableName}\")");
         else
            segments.Add($"ToTable(\"{modelClass.TableName}\", \"{modelClass.DatabaseSchema}\")");

         // primary key code segments must be output last, since HasKey returns a different type
         List<ModelAttribute> identityAttributes = modelClass.IdentityAttributes.ToList();
         if (identityAttributes.Count() == 1)
            segments.Add($"HasKey(t => t.{identityAttributes[0].Name})");
         else if (identityAttributes.Count() > 1)
            segments.Add($"HasKey(t => new {{ t.{string.Join(", t.", identityAttributes.Select(ia => ia.Name))} }})");
      }

      if (segments.Count > 1)
      {
         if (modelRoot.ChopMethodChains)
            OutputChopped(segments);
         else
            Output(string.Join(".", segments) + ";");
      }

	  // indexed properties
      foreach (ModelAttribute indexed in modelClass.Attributes.Where(x => x.Indexed && !x.IsIdentity))
      {
         segments.Clear();
         segments.Add($"modelBuilder.Entity<{modelClass.FullName}>().HasIndex(t => t.{indexed.Name})");
         if (indexed.IndexedUnique) segments.Add("IsUnique()");
         if (segments.Count > 1)
         {
            if (modelRoot.ChopMethodChains)
               OutputChopped(segments);
            else
               Output(string.Join(".", segments) + ";");
         }
	  }

      // attribute level
      foreach (ModelAttribute modelAttribute in modelClass.Attributes.Where(x => x.Persistent && !SpatialTypes.Contains(x.Type)))
      {
         segments.Clear();

         if (modelAttribute.MaxLength > 0)
            segments.Add($"HasMaxLength({modelAttribute.MaxLength})");
         if (modelAttribute.Required)
            segments.Add("IsRequired()");
         if (modelAttribute.ColumnName != modelAttribute.Name)
            segments.Add($"HasColumnName(\"{modelAttribute.ColumnName}\")");
         if (modelAttribute.ColumnType != "default")
            segments.Add($"HasColumnType(\"{modelAttribute.ColumnType}\");");
         if (!modelAttribute.AutoProperty)
            segments.Add($"HasField(\"_{modelAttribute.Name}\")");
         if (modelAttribute.ColumnType.ToLowerInvariant() != "default")
         {
            if (modelAttribute.ColumnType.ToLowerInvariant() == "varchar" || modelAttribute.ColumnType.ToLowerInvariant() == "char")
               segments.Add($"HasColumnType(\"{modelAttribute.ColumnType}({modelAttribute.MaxLength})\")");
            else
               segments.Add($"HasColumnType(\"{modelAttribute.ColumnType}\")");
         }
         if (modelAttribute.IsConcurrencyToken)
            segments.Add("IsRowVersion()");
         
         if (modelAttribute.IsIdentity)
         {
            if (modelAttribute.IdentityType == IdentityType.AutoGenerated)
               segments.Add("ValueGeneratedOnAdd()");
            else if (modelAttribute.IdentityType == IdentityType.Manual)
               segments.Add("ValueGeneratedNever()");
         }

         if (segments.Any())
         {
            segments.Insert(0, $"modelBuilder.Entity<{modelClass.FullName}>()");
            segments.Insert(1, $"Property(t => t.{modelAttribute.Name})");

            if (modelRoot.ChopMethodChains)
               OutputChopped(segments);
            else
               Output(string.Join(".", segments) + ";");
         }
      }

      // Navigation endpoints are distingished as Source and Target. They are also distinguished as Principal
      // and Dependent. How do these map?
      // In the case of one-to-one or zero-to-one-to-zero-to-one, it's model dependent and the user has to tell us
      // In all other cases, we can tell by the cardinalities of the associations
      // What matters is the Principal and Dependent classifications, so we look at those. 
      // Source and Target are accidents of where the user started drawing the association.

      // navigation properties
      foreach (UnidirectionalAssociation association in Association.GetLinksToTargets(modelClass).OfType<UnidirectionalAssociation>())
      {
         if (visited.Contains(association)) continue;
         visited.Add(association);

         segments.Clear();
         segments.Add($"modelBuilder.Entity<{modelClass.FullName}>()");
         bool required = false;

         switch (association.TargetMultiplicity) // realized by property on source
         {
            case Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroMany:
               // TODO: Implement many-to-many
               if (association.SourceMultiplicity != Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroMany)
                  segments.Add($"HasMany(x => x.{association.TargetPropertyName})");
               break;
            case Sawczyn.EFDesigner.EFModel.Multiplicity.One:
               segments.Add($"HasOne(x => x.{association.TargetPropertyName})");
               break;
            case Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroOne:
               segments.Add($"HasOne(x => x.{association.TargetPropertyName})");
               break;
            //case Sawczyn.EFDesigner.EFModel.Multiplicity.OneMany:
            //   segments.Add($"HasMany(x => x.{association.TargetPropertyName})");
            //   break;
         }

         switch (association.SourceMultiplicity) // realized by property on target, but no property on target
         {
            case Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroMany:
               if (association.TargetMultiplicity != Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroMany)
                  segments.Add("WithMany()");
               // TODO: Implement many-to-many when available
               break;
            case Sawczyn.EFDesigner.EFModel.Multiplicity.One:
               segments.Add("WithOne()");
               required = true;
               break;
            case Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroOne:
               segments.Add("WithOne()");
               break;
            //case Sawczyn.EFDesigner.EFModel.Multiplicity.OneMany:
            //   segments.Add("HasMany()");
            //   break;
         }

         string dependentClass = association.SourceRole == EndpointRole.Dependent ? association.Source.FullName : association.Target.FullName;
         string columnPrefix = association.SourceRole == EndpointRole.Dependent ? "" : association.Target.FullName;
         segments.Add($"HasForeignKey(\"{columnPrefix}{association.TargetPropertyName}_Id\")");

         if (required)
            segments.Add("IsRequired()");

         if ((association.TargetDeleteAction != DeleteAction.Default && association.SourceRole == EndpointRole.Principal) ||
             (association.SourceDeleteAction != DeleteAction.Default && association.TargetRole == EndpointRole.Principal))
         {
            DeleteAction deleteAction = (association.SourceRole == EndpointRole.Principal) 
                                          ? association.TargetDeleteAction 
                                          : association.SourceDeleteAction;
            switch (deleteAction)
            {
               case DeleteAction.None:
                  segments.Add("OnDelete(DeleteBehavior.Restrict)");
                  break;
               case DeleteAction.Cascade:
                  segments.Add("OnDelete(DeleteBehavior.Cascade)");
                  break;
            }
         }

         if (modelRoot.ChopMethodChains)
            OutputChopped(segments);
         else
            Output(string.Join(".", segments) + ";");
      }

      foreach (BidirectionalAssociation association in Association.GetLinksToSources(modelClass).OfType<BidirectionalAssociation>())
      {
         if (visited.Contains(association)) continue;
         visited.Add(association);

         // TODO: fix cascade delete
         bool required = false;

         segments.Clear();
         segments.Add($"modelBuilder.Entity<{modelClass.FullName}>()");

         switch (association.SourceMultiplicity) // realized by property on target
         {
            case Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroMany:
               // TODO: Implement many-to-many
               if (association.TargetMultiplicity != Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroMany)
                  segments.Add($"HasMany(x => x.{association.SourcePropertyName})");
               break;
            case Sawczyn.EFDesigner.EFModel.Multiplicity.One:
               segments.Add($"HasOne(x => x.{association.SourcePropertyName})");
               break;
            case Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroOne:
               segments.Add($"HasOne(x => x.{association.SourcePropertyName})");
               break;
            //case Sawczyn.EFDesigner.EFModel.Multiplicity.OneMany:
            //   segments.Add($"HasMany(x => x.{association.SourcePropertyName})");
            //   break;
         }

         switch (association.TargetMultiplicity) // realized by property on source
         {
            case Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroMany:
               // TODO: Implement many-to-many
               if (association.SourceMultiplicity != Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroMany)
                  segments.Add($"WithMany(x => x.{association.TargetPropertyName})");
               break;
            case Sawczyn.EFDesigner.EFModel.Multiplicity.One:
               segments.Add($"WithOne(x => x.{association.TargetPropertyName})");
               required = true;
               break;
            case Sawczyn.EFDesigner.EFModel.Multiplicity.ZeroOne:
               segments.Add($"WithOne(x => x.{association.TargetPropertyName})");
               break;
            //case Sawczyn.EFDesigner.EFModel.Multiplicity.OneMany:
            //   segments.Add($"HasMany(x => x.{association.TargetPropertyName})");
            //   break;
         }

         string foreignKeySegment = CreateForeignKeyColumnSegmentEFCore(association, foreignKeyColumns);
         if (foreignKeySegment != null) segments.Add(foreignKeySegment);

         //if (association.SourceRole == EndpointRole.Dependent) 
         //   segments.Add($"HasForeignKey(\"{association.TargetPropertyName}_Id\")");
         //else
         //   segments.Add($"HasForeignKey(\"{association.SourcePropertyName}_Id\")");

         if (required)
            segments.Add("IsRequired()");

         if ((association.TargetDeleteAction != DeleteAction.Default && association.SourceRole == EndpointRole.Principal) ||
             (association.SourceDeleteAction != DeleteAction.Default && association.TargetRole == EndpointRole.Principal))
         {
            DeleteAction deleteAction = (association.SourceRole == EndpointRole.Principal) 
                                          ? association.TargetDeleteAction 
                                          : association.SourceDeleteAction;
            switch (deleteAction)
            {
               case DeleteAction.None:
                  segments.Add("OnDelete(DeleteBehavior.Restrict)");
                  break;
               case DeleteAction.Cascade:
                  segments.Add("OnDelete(DeleteBehavior.Cascade)");
                  break;
            }
         }

         if (modelRoot.ChopMethodChains)
            OutputChopped(segments);
         else
            Output(string.Join(".", segments) + ";");
      }
   }

   NL();
   
   Output("OnModelCreatedImpl(modelBuilder);");
   Output("}");

   Output("}");

   EndNamespace(modelRoot.Namespace);
}

string CreateForeignKeyColumnSegmentEFCore(Association association, List<string> foreignKeyColumns)
{
   // foreign key definitions always go in the table representing the Dependent end of the association
   // if there is no dependent end (i.e., many-to-many), there are no foreign keys
   string nameBase = string.Empty;

   if (association.SourceRole == EndpointRole.Dependent)
      nameBase = association.TargetPropertyName;
   else if (association.TargetRole == EndpointRole.Dependent)
      nameBase = association is BidirectionalAssociation b ? b.SourcePropertyName :  $"{association.Source.Name}.{association.TargetPropertyName}";
   else
      return null;

   string columnName = $"{nameBase}_Id";
   if (foreignKeyColumns.Contains(columnName))
   {
      int index = 0;
      do
      {
         columnName = $"{nameBase}{++index}_Id";
      } while (foreignKeyColumns.Contains(columnName));
   }
   foreignKeyColumns.Add(columnName);
   return $"HasForeignKey(\"{columnName}\")";
}
#>